{"version":3,"sources":["constants/cubicLevel.js","components/Box.jsx","components/Camera.jsx","components/Scene.jsx","components/App.jsx","index.jsx"],"names":["levelMap","cubeId","level","Array","map","xRow","x","yRow","y","zRow","z","Box","position","mesh","useRef","useState","active","setActive","dirtTexture","useLoader","TextureLoader","grassTexture","castShadow","receiveShadow","ref","cube","onClick","e","stopPropagation","state","attach","args","transparent","opacity","side","THREE","attachArray","Camera","useThree","camera","gl","useEffect","set","controls","OrbitControls","domElement","minDistance","maxDistance","fov","dispose","Scene","intensity","color","Stars","radius","depth","count","factor","saturation","fade","fallback","xPos","length","yPos","zPos","App","antialias","pixelRatio","window","devicePixelRatio","colorManagement","shadowMap","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.fa919e89.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nexport const levelMap = {\n\n};\n\nlet cubeId = 0;\nexport const level = [...new Array(10)].map((xRow, x) => {\n  cubeId += 1;\n  return [...new Array(10)].map((yRow, y) => {\n    cubeId += 1;\n    return [...new Array(10)].map((zRow, z) => {\n      cubeId += 1;\n      return cubeId;\n    });\n  });\n});\n","import { useRef, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport { TextureLoader } from 'three/src/loaders/TextureLoader';\nimport * as THREE from 'three';\nimport { useLoader } from '@react-three/fiber';\nimport { levelMap } from 'constants/cubicLevel';\n\nconst Box = ({ cubeId, position }) => {\n  const mesh = useRef(null);\n  const [active, setActive] = useState(true);\n  // const [hovered, setHovered] = useState(false);\n  const dirtTexture = useLoader(TextureLoader, 'textures/mc-dirt.jpeg');\n  const grassTexture = useLoader(TextureLoader, 'textures/mc-grass.png');\n\n  return active && (\n    <mesh\n      castShadow\n      receiveShadow\n      position={position}\n      ref={mesh}\n      cube={levelMap[cubeId]}\n      onClick={(e) => {\n        e.stopPropagation();\n        setActive((state) => !state);\n      }}\n    >\n      <boxBufferGeometry attach=\"geometry\" args={[1, 1, 1]} />\n      <meshStandardMaterial map={dirtTexture} transparent opacity={1} side={THREE.DoubleSide} attachArray=\"material\" />\n      <meshStandardMaterial map={dirtTexture} transparent opacity={1} side={THREE.DoubleSide} attachArray=\"material\" />\n      <meshStandardMaterial map={grassTexture} transparent opacity={1} side={THREE.DoubleSide} attachArray=\"material\" />\n      <meshStandardMaterial map={dirtTexture} transparent opacity={1} side={THREE.DoubleSide} attachArray=\"material\" />\n      <meshStandardMaterial map={dirtTexture} transparent opacity={1} side={THREE.DoubleSide} attachArray=\"material\" />\n      <meshStandardMaterial map={dirtTexture} transparent opacity={1} side={THREE.DoubleSide} attachArray=\"material\" />\n    </mesh>\n\n  );\n};\n\nBox.propTypes = {\n  cubeId: PropTypes.number.isRequired,\n  position: PropTypes.arrayOf(PropTypes.number).isRequired,\n};\n\nexport default Box;\n","import { useEffect } from 'react';\nimport { useThree } from '@react-three/fiber';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\n\nconst Camera = () => {\n  const { camera, gl } = useThree();\n  useEffect(\n    () => {\n      camera.position.set(5, 5, 5);\n      const controls = new OrbitControls(camera, gl.domElement);\n\n      controls.minDistance = 3;\n      controls.maxDistance = 20;\n      controls.fov = 15;\n\n      return () => {\n        controls.dispose();\n      };\n    },\n    [camera, gl],\n  );\n  return null;\n};\n\nexport default Camera;\n","import { Suspense } from 'react';\nimport Box from 'components/Box';\nimport Camera from 'components/Camera';\nimport { Stars } from '@react-three/drei';\nimport { level } from 'constants/cubicLevel';\n\nconst Scene = () => {\n  const generateCubicLevel = () => level.map(\n    (xRow, x) => xRow.map(\n      (yRow, y) => yRow.map(\n        (zRow, z) => {\n          const xPos = x - (level.length / 2) + 0.5;\n          const yPos = y - (level[0].length / 2) + 0.5;\n          const zPos = z - (level[0][0].length / 2) + 0.5;\n          // console.log(levelMap[zRow]);\n          return <Box key={zRow} position={[xPos, yPos, zPos]} cubeId={zRow} />;\n        },\n      ),\n    ),\n  );\n\n  return (\n    <>\n      <Camera />\n      <fog attach=\"fog\" args={['black', 0, 15]} />\n      <ambientLight intensity={0.2} />\n      <spotLight position={[10, 4, 10]} intensity={1.5} castShadow />\n      <pointLight position={[-10, 5, 10]} color=\"white\" intensity={0.3} />\n      <Stars\n        radius={100} // Radius of the inner sphere (default=100)\n        depth={50} // Depth of area where stars should fit (default=50)\n        count={5000} // Amount of stars (default=5000)\n        factor={4} // Size factor (default=4)\n        saturation={0} // Saturation 0-1 (default=0)\n        fade\n      />\n      <Suspense fallback={null}>\n        {generateCubicLevel()}\n      </Suspense>\n    </>\n  );\n};\n\nexport default Scene;\n","import { Canvas } from '@react-three/fiber';\nimport Scene from 'components/Scene';\n\nconst App = () => (\n  <Canvas\n    gl={{ antialias: false }}\n    pixelRatio={window.devicePixelRatio}\n    colorManagement\n    shadowMap\n    camera={{ fov: 45 }}\n  >\n    <Scene />\n  </Canvas>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from 'components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}